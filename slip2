Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the FIFO page 
 replacement algorithm. Assume the memory of n frames.
 Reference String : 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 
solution:-


 #include<stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
printf("\n ENTER THE NUMBER OF PAGES:\n");
scanf("%d",&n);
printf("\n ENTER THE PAGE NUMBER :\n");
for(i=1;i<=n;i++)
scanf("%d",&a[i]);
printf("\n ENTER THE NUMBER OF FRAMES :");
scanf("%d",&no);
for(i=0;i<no;i++)
frame[i]= -1;
j=0;
printf("\tref string\t page frames\n");
for(i=1;i<=n;i++)
{
printf("%d\t\t",a[i]);
avail=0;
for(k=0;k<no;k++)
if(frame[k]==a[i])
avail=1;
if (avail==0)
{
frame[j]=a[i];
j=(j+1)%no;
count++;
for(k=0;k<no;k++)
pintf("%d\t",frame[k]);
}
printf("\n");
}
printf("Page Fault Is %d",count);
return 0;
}





Q.2 Write a program to implement the shell. It should display the command 
 prompt “myshell$”. Tokenize the command line and execute the given 
 command by creating the child process. Additionally it should interpret the 
 following ‘list’ commands as 
 myshell$ list f dirname :- To print names of all the files in current 
 directory.
 myshell$ list n dirname :- To print the number of all entries in the current 
 directory 
solution:-


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#define MAX 100
void list_files(char *dirname) {
struct dirent *entry;
DIR *dir = opendir(dirname);
if (dir == NULL) {
 perror("Error opening directory");
 return;
 }
 while ((entry = readdir(dir)) != NULL) {
if (entry->d_type == DT_REG) { // Only list regular files
 printf("%s\n", entry->d_name);
}
}
 closedir(dir);
}
void count_entries(char *dirname) {
struct dirent *entry;
DIR *dir = opendir(dirname);
int count = 0;
if (dir == NULL) {
perror("Error opening directory");
return;
}
 while ((entry = readdir(dir)) != NULL) {
count++;
 }
printf("Total entries: %d\n", count);
closedir(dir);
}
int main() {
char input[MAX];
 char *args[MAX];
 while (1) {
printf("myshell$ ");
fgets(input, MAX, stdin);
 input[strlen(input) - 1] = '\0'; // Remove newline character
 int i = 0;
 args[i] = strtok(input, " ");
 while (args[i] != NULL) {
  i++;
 args[i] = strtok(NULL, " ");
 }
if (args[0] == NULL) {
continue;
}
if (strcmp(args[0], "exit") == 0) {
break;
} else if (strcmp(args[0], "list") == 0 && args[1] != NULL && args[2] != NULL) {
if (strcmp(args[1], "f") == 0) {
list_files(args[2]);
} else if (strcmp(args[1], "n") == 0) {
count_entries(args[2]);
} else {
 printf("Invalid list command option.\n");
 }
 } else {
 pid_t pid = fork();
if (pid == 0) {
execvp(args[0], args);
perror("Error executing command");
exit(1);
} else {
wait(NULL);
}
}
return 0;
}
