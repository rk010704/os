Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the LRU page 
 replacement algorithm. Assume the memory of n frames.
 Reference String : 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6


 
#include <stdio.h>



int find_lru(int time[], int n) {

    int minimum = time[0], pos = 0;

    for (int i = 1; i < n; ++i) {

        if (time[i] < minimum) {

            minimum = time[i];

            pos = i;

        }

    }

    return pos;

}



void lru_page_replacement(int reference_string[], int reference_length, int frames[], int n) {

    int time[n], flag1, flag2, pos, page_faults = 0, current_time = 0;

   

    for (int i = 0; i < n; ++i) {

        frames[i] = -1;  // Initialize frames as empty

    }



    printf("Page scheduling:\n");



    for (int i = 0; i < reference_length; ++i) {

        flag1 = flag2 = 0;



        for (int j = 0; j < n; ++j) {

            if (frames[j] == reference_string[i]) { // Page hit

                flag1 = flag2 = 1;

                time[j] = ++current_time; // Update time for LRU tracking

                break;

            }

        }



        if (flag1 == 0) {

            for (int j = 0; j < n; ++j) {

                if (frames[j] == -1) { // Empty frame found

                    page_faults++;

                    frames[j] = reference_string[i];

                    time[j] = ++current_time;

                    flag2 = 1;

                    break;

                }

            }

        }



        if (flag2 == 0) { // Page replacement needed

            pos = find_lru(time, n);

            frames[pos] = reference_string[i];

            time[pos] = ++current_time;

            page_faults++;

        }



        // Display current frame status

        for (int j = 0; j < n; ++j) {

            if (frames[j] != -1) {

                printf("%d ", frames[j]);

            } else {

                printf("- ");

            }

        }

        printf("\n");

    }



    printf("\nTotal number of page faults: %d\n", page_faults);

}



int main() {

    int reference_string[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};

    int reference_length = sizeof(reference_string) / sizeof(reference_string[0]);



    int n;

    printf("Enter the number of frames: ");

    scanf("%d", &n);



    int frames[n];



    lru_page_replacement(reference_string, reference_length, frames, n);



    return 0;

}




Q.2 Write a C program to simulate FCFS CPU-scheduling. The arrival time and 
 first CPU-burst of different jobs should be input to the system. Accept no. of 
 Processes, arrival time and burst time. The output should give Gantt chart, 
 turnaround time and waiting time for each process. Also find the average 
 waiting time and turnaround time.



 #include <stdio.h>



struct Process {

    int pid;

    int arrival_time;

    int burst_time;

    int completion_time;

    int turnaround_time;

    int waiting_time;

};



void sort_by_arrival(struct Process p[], int n) {

    struct Process temp;

    for (int i = 0; i < n - 1; i++) {

        for (int j = i + 1; j < n; j++) {

            if (p[i].arrival_time > p[j].arrival_time) {

                temp = p[i];

                p[i] = p[j];

                p[j] = temp;

            }

        }

    }

}



void fcfs_scheduling(struct Process p[], int n) {

    int current_time = 0;

    printf("\nGantt Chart:\n");

    for (int i = 0; i < n; i++) {

        if (current_time < p[i].arrival_time) {

            current_time = p[i].arrival_time;

        }

        printf("P%d [%d - %d] -> ", p[i].pid, current_time, current_time + p[i].burst_time);

        p[i].completion_time = current_time + p[i].burst_time;

        p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;

        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;

        current_time += p[i].burst_time;

    }

    printf("Finish\n");

}



void calculate_and_display_avg_times(struct Process p[], int n) {

    float total_turnaround_time = 0, total_waiting_time = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tTAT\tWT\n");

    for (int i = 0; i < n; i++) {

        total_turnaround_time += p[i].turnaround_time;

        total_waiting_time += p[i].waiting_time;

        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time,

               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);

    }

    printf("\nAverage Turnaround Time: %.2f", total_turnaround_time / n);

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);

}



int main() {

    int n;

    printf("Enter the number of processes: ");

    scanf("%d", &n);

   

    struct Process p[n];

   

    for (int i = 0; i < n; i++) {

        p[i].pid = i + 1;

        printf("Enter arrival time for process P%d: ", i + 1);

        scanf("%d", &p[i].arrival_time);

        printf("Enter burst time for process P%d: ", i + 1);

        scanf("%d", &p[i].burst_time);

    }

   

    sort_by_arrival(p, n);

    fcfs_scheduling(p, n);

    calculate_and_display_avg_times(p, n);

   

    return 0;

}
