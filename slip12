Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the LRU page 
 replacement algorithm. Assume the memory of n frames.
 Reference String : 3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 
 solution:-
solution:-

#include <stdio.h>



#define MAX_FRAMES 10

#define MAX_REFERENCES 20



// Function to find the least recently used page

int findLRU(int time[], int n) {

    int i, min = time[0], pos = 0;

    for (i = 1; i < n; i++) {

        if (time[i] < min) {

            min = time[i];

            pos = i;

        }

    }

    return pos;

}



int main() {

    int n, frames[MAX_FRAMES], referenceString[MAX_REFERENCES], time[MAX_FRAMES];

    int pageFaults = 0, counter = 0;

    int i, j, pos, flag1, flag2;



    // Define the number of frames

    printf("Enter the number of frames: ");

    scanf("%d", &n);



    // Initialize frames

    for (i = 0; i < n; i++) {

        frames[i] = -1;

    }



    // Define the reference string

    int referenceStringLength = 15;

    int referenceStringInput[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};



    printf("Reference String: ");

    for (i = 0; i < referenceStringLength; i++) {

        referenceString[i] = referenceStringInput[i];

        printf("%d ", referenceString[i]);

    }

    printf("\n");



    // Simulate LRU page replacement

    for (i = 0; i < referenceStringLength; i++) {

        flag1 = flag2 = 0;



        // Check if the page is already in a frame

        for (j = 0; j < n; j++) {

            if (frames[j] == referenceString[i]) {

                counter++;

                time[j] = counter; // Update time for LRU

                flag1 = flag2 = 1;

                break;

            }

        }



        // If page is not in a frame (page fault occurs)

        if (flag1 == 0) {

            for (j = 0; j < n; j++) {

                if (frames[j] == -1) {  // Empty frame available

                    counter++;

                    pageFaults++;

                    frames[j] = referenceString[i];

                    time[j] = counter;

                    flag2 = 1;

                    break;

                }

            }

        }



        // Replace the least recently used page

        if (flag2 == 0) {

            pos = findLRU(time, n);

            counter++;

            pageFaults++;

            frames[pos] = referenceString[i];

            time[pos] = counter;

        }



        // Display current frames status

        printf("\nFrames: ");

        for (j = 0; j < n; j++) {

            if (frames[j] != -1)

                printf("%d ", frames[j]);

            else

                printf("- ");

        }

    }



    printf("\n\nTotal number of page faults: %d\n", pageFaults);



    return 0;

}
 
Q.2 Write a program to implement the shell. It should display the command 
 prompt “myshell$”. Tokenize the command line and execute the given 
 command by creating the child process. Additionally it should interpret the 
 following ‘list’ commands as 
 myshell$ list f dirname :- To print names of all the files in current 
 directory.
 myshell$ list n dirname :- To print the number of all entries in the current 
 directory
 solution:-

 Q2.

#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/wait.h>

#include <dirent.h>



#define MAX_INPUT 100

#define MAX_ARGS 10



void list_files(const char *dirname) {

    struct dirent *entry;

    DIR *dp = opendir(dirname);



    if (dp == NULL) return;



    while ((entry = readdir(dp)) != NULL) {

        if (entry->d_name[0] != '.') {

            printf("%s\n", entry->d_name);

        }

    }
closedir(dp);

}



void list_count(const char *dirname) {

    struct dirent *entry;

    DIR *dp = opendir(dirname);

    int count = 0;



    if (dp == NULL) return;



    while ((entry = readdir(dp)) != NULL) {

        if (entry->d_name[0] != '.') {

            count++;

        }

    }



    closedir(dp);

    printf("%d\n", count);

}



int main() {

    char input[MAX_INPUT];

    char *args[MAX_ARGS];

    char *token;



    while (1) {

        printf("myshell$ ");

        fgets(input, sizeof(input), stdin);

        input[strcspn(input, "\n")] = 0;



        int i = 0;

        token = strtok(input, " ");

        while (token != NULL && i < MAX_ARGS - 1) {

            args[i++] = token;

            token = strtok(NULL, " ");

        }

        args[i] = NULL;



        if (args[0] == NULL) continue;



        if (strcmp(args[0], "exit") == 0) break;



        if (strcmp(args[0], "list") == 0 && args[1] && args[2]) {

            if (strcmp(args[1], "f") == 0) {

                list_files(args[2]);

            } else if (strcmp(args[1], "n") == 0) {

                list_count(args[2]);

            }

            continue;

        }



        pid_t pid = fork();

        if (pid == 0) {

            if (execvp(args[0], args) == -1) perror("execvp");

            exit(EXIT_FAILURE);

        } else if (pid > 0) {

            wait(NULL);

        }

    }



    return 0;

}
