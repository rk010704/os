Q.1 Write a C program to implement the shell which displays the command 
 prompt “myshell$”. It accepts the command, tokenize the command line and 
 execute it by creating the child process. Also implement the additional 
 command ‘typeline’ as 
 typeline +n filename :- To print first n lines in the file. 
 solution:-


 
 #include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/wait.h>



#define MAX_INPUT 100

#define MAX_ARGS 10



// Function to print first 'n' lines from the file

void typeline_n(const char *filename, int n) {

    FILE *file = fopen(filename, "r");

    char line[256];

    int count = 0;



    if (file == NULL) {

        perror("Error opening file");

        return;

    }



    // Read and print the first 'n' lines from the file

    while (fgets(line, sizeof(line), file) && count < n) {

        printf("%s", line);

        count++;

    }



    fclose(file);

}



int main() {

    char input[MAX_INPUT];

    char *args[MAX_ARGS];

    char *token;



    while (1) {

        // Display the prompt

        printf("myshell$ ");

        // Get input from the user

        fgets(input, sizeof(input), stdin);

        // Remove newline character from the input

        input[strcspn(input, "\n")] = 0;



        // Tokenize the input

        int i = 0;

        token = strtok(input, " ");

        while (token != NULL && i < MAX_ARGS - 1) {

            args[i++] = token;

            token = strtok(NULL, " ");

        }

        args[i] = NULL;



        // If no input is given, continue

        if (args[0] == NULL) continue;



        // Exit command

        if (strcmp(args[0], "exit") == 0) {

            break;

        }



        // Custom 'typeline' command implementation

        if (strcmp(args[0], "typeline") == 0) {

            if (args[1] != NULL && args[1][0] == '+' && args[2] != NULL) {

                int n = atoi(&args[1][1]);  // Extract number from +n

                typeline_n(args[2], n);     // Call function to print first 'n' lines

            } else {

                printf("Usage: typeline +n filename\n");

            }

            continue;

        }



        // Fork a child process to execute other commands

        pid_t pid = fork();

        if (pid == 0) {  // Child process

            if (execvp(args[0], args) == -1) {

                perror("Error executing command");

            }

            exit(EXIT_FAILURE);

        } else if (pid > 0) {  // Parent process

            wait(NULL);  // Wait for the child process to complete

        } else {

            perror("Fork failed");

        }

    }



    return 0;

}


Q.2 Write a C program to simulate Non-preemptive Shortest Job First (SJF) –
 scheduling. The arrival time and first CPU-burst of different jobs should be 
 input to the system. Accept no. of Processes, arrival time and burst time. The 
 output should give Gantt chart, turnaround time and waiting time for each 
 process. Also find the average waiting time and turnaround time

solution:-


#include <stdio.h>
void main()
{
  int p[10],at[10],bt[10],st[10],ft[10],wt[10],tt[10],n,i,j,temp=0,bsum=0;
  float awt=0,att=0;
  printf("*** Process Schedular using Non-Primitive SJF ***\n");
  printf("How many process : ");
  scanf("%d",&n);
  printf("\nEnter details of each process....\n");
    //Accept Data
  for(i=0; i<n; i++)
  {
    printf("\nProcess %d :",i+1);
    p[i]=i+1;
    printf("\n\tarrival = ");
    scanf("%d",&at[i]);
    printf("\tburst = ");
    scanf("%d",&bt[i]);
  }
    //Data Sorting according to AT
  for(i=0; i<n; i++)
    for(j=0; j<(n-1); j++)
    {
      if(at[j]>at[j+1])
      {
        temp=p[j];
        p[j]=p[j+1];
        p[j+1]=temp;
        
        temp=at[j];
        at[j]=at[j+1];
        at[j+1]=temp;
        
        temp=bt[j];
        bt[j]=bt[j+1];
        bt[j+1]=temp;
      }
    }
  
      //Data Sorting according to BT
  for(i=1; i<n; i++)
    for(j=1; j<(n-1); j++)
    {
      if(bt[j]>bt[j+1])
      {
        temp=p[j];
        p[j]=p[j+1];
        p[j+1]=temp;
        
        temp=at[j];
        at[j]=at[j+1];
        at[j+1]=temp;
        
        temp=bt[j];
        bt[j]=bt[j+1];
        bt[j+1]=temp;
      }
    }
       
    //Data Sorting according to condition at[index]<=bsum
  bsum=bt[0];
  for(i=1; i<n; i++)
  {
    for(j=i; j<(n-1); j++)
    {
      if(at[j]<=bsum)
      {
        if(i==j)
          break;
        else if(i==j+1)
        {
          temp=p[j];
          p[j]=p[i];
          p[i]=temp;
        
          temp=at[j];
          at[j]=at[i];
          at[i]=temp;
        
          temp=bt[j];
          bt[j]=bt[i];
          bt[i]=temp;
          break;
        }
        else
        {
          while(j!=i)
    	  {
	    temp=p[j];
	    p[j]=p[j-1];
	    p[j-1]=temp;
		
	    temp=at[j];
	    at[j]=at[j-1];
	    at[j-1]=temp;
		
	    temp=bt[j];
	    bt[j]=bt[j-1];
	    bt[j-1]=temp;
	    j--;#include <stdio.h>
void main()
{
  int p[10],at[10],bt[10],st[10],ft[10],wt[10],tt[10],n,i,j,temp=0,bsum=0;
  float awt=0,att=0;
  printf("*** Process Schedular using Non-Primitive SJF ***\n");
  printf("How many process : ");
  scanf("%d",&n);
  printf("\nEnter details of each process....\n");
    //Accept Data
  for(i=0; i<n; i++)
  {
    printf("\nProcess %d :",i+1);
    p[i]=i+1;
    printf("\n\tarrival = ");
    scanf("%d",&at[i]);
    printf("\tburst = ");
    scanf("%d",&bt[i]);
  }
    //Data Sorting according to AT
  for(i=0; i<n; i++)
    for(j=0; j<(n-1); j++)
    {
      if(at[j]>at[j+1])
      {
        temp=p[j];
        p[j]=p[j+1];
        p[j+1]=temp;
        
        temp=at[j];
        at[j]=at[j+1];
        at[j+1]=temp;
        
        temp=bt[j];
        bt[j]=bt[j+1];
        bt[j+1]=temp;
      }
    }
  
      //Data Sorting according to BT
  for(i=1; i<n; i++)
    for(j=1; j<(n-1); j++)
    {
      if(bt[j]>bt[j+1])
      {
        temp=p[j];
        p[j]=p[j+1];
        p[j+1]=temp;
        
        temp=at[j];
        at[j]=at[j+1];
        at[j+1]=temp;
        
        temp=bt[j];
        bt[j]=bt[j+1];
        bt[j+1]=temp;
      }
    }
       
    //Data Sorting according to condition at[index]<=bsum
  bsum=bt[0];
  for(i=1; i<n; i++)
  {
    for(j=i; j<(n-1); j++)
    {
      if(at[j]<=bsum)
      {
        if(i==j)
          break;
        else if(i==j+1)
        {
          temp=p[j];
          p[j]=p[i];
          p[i]=temp;
        
          temp=at[j];
          at[j]=at[i];
          at[i]=temp;
	  }
	  break;
        }
      }
    }
    bsum=bsum+bt[i];
  }
    
  // Calculate ST, FT
  st[0]=at[0];
  ft[0]=st[0]+bt[0];
  for(i=1; i<n; i++)
  {
    st[i]=st[i-1]+bt[i-1];// st[i]=ft[i-1]
    ft[i]=st[i]+bt[i];
  }
    // Calculate WT, TT
  for(i=0; i<n; i++)
  {
    wt[i]=st[i]-at[i];
    tt[i]=wt[i]+bt[i];
  }
    // Calculate Average WT & TT
  for(i=0; i<n; i++)
  {
    awt=awt+wt[i];
    att=att+tt[i];
  }
  awt=awt/n;
  att=att/n;
  
    // Display Result
  //printf("\n*** Gantt Chart ***\n");
 // printf("\t%d--P");
  printf("\n*** Table ***\n");
  printf("\tProcess\tAT\tBT\tST\tFT\tWT\tTT\n");
  for(i=0; i<n; i++)
  {
    printf("\tP%d\t%d\t%d\t%d\t%d\t%d\t%d\n",p[i],at[i],bt[i],st[i],ft[i],wt[i],tt[i]);
  }
  printf("\n");
  printf("\nAverage Waiting Time = %.2f",awt);
  printf("\nAverage Turnaround Time = %.2f",att);
  printf("\n");
}
