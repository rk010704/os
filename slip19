Q.1 Write a C program to implement the shell. It should display the command 
 prompt “myshell$”. Tokenize the command line and execute the given 
 command by creating the child process. Additionally it should interpret the 
 following ‘list’ commands as 
 myshell$ list f dirname :- To print names of all the files in current 
 directory.



 
#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/wait.h>

#include <dirent.h>



#define MAX_CMD_LEN 1024

#define MAX_ARGS 100



void list_files_in_directory(const char *dirname) {

    struct dirent *de;

    DIR *dr = opendir(dirname);



    if (dr == NULL) {

        printf("Could not open current directory\n");

        return;

    }



    printf("Files in directory %s:\n", dirname);

    while ((de = readdir(dr)) != NULL) {

        printf("%s\n", de->d_name);

    }

    closedir(dr);

}



void execute_command(char **args) {

    pid_t pid = fork();



    if (pid < 0) {

        printf("Failed to create a new process\n");

    } else if (pid == 0) { // Child process

        if (execvp(args[0], args) == -1) {

            perror("myshell");

        }

        exit(EXIT_FAILURE);

    } else { // Parent process

        wait(NULL);

    }

}



int main() {

    char command[MAX_CMD_LEN];

    char *args[MAX_ARGS];

    char *token;

    int should_run = 1;



    while (should_run) {

        printf("myshell$ ");

        fgets(command, MAX_CMD_LEN, stdin);

        command[strlen(command) - 1] = '\0'; // Remove newline character



        int arg_count = 0;

        token = strtok(command, " ");

        while (token != NULL) {

            args[arg_count++] = token;

            token = strtok(NULL, " ");

        }

        args[arg_count] = NULL;



        if (arg_count == 0) {

            continue; // No input, prompt again

        }



        if (strcmp(args[0], "exit") == 0) {

            should_run = 0;

        } else if (strcmp(args[0], "list") == 0 && arg_count == 3 && strcmp(args[1], "f") == 0) {

            list_files_in_directory(args[2]);

        } else {

            execute_command(args);

        }

    }



    return 0;

}


Q.2 Write the simulation program for Round Robin scheduling for given time 
 quantum. The arrival time and first CPU-burst of different jobs should be input 
 to the system. Accept no. of Processes, arrival time and burst time. The output 
 should give the Gantt chart, turnaround time and waiting time for each 
 process. Also display the average turnaround time and average waiting time.


 #include <stdio.h>



struct Process {

    int pid;

    int arrival_time;

    int burst_time;

    int remaining_time;

    int completion_time;

    int turnaround_time;

    int waiting_time;

};



void round_robin(struct Process p[], int n, int time_quantum) {

    int current_time = 0, completed = 0, i = 0;

    int wait_time = 0, tat = 0;



    printf("\nGantt Chart:\n");



    while (completed != n) {

        if (p[i].remaining_time > 0 && p[i].arrival_time <= current_time) {

            int time_spent = (p[i].remaining_time > time_quantum) ? time_quantum : p[i].remaining_time;

            printf("P%d [%d - %d] -> ", p[i].pid, current_time, current_time + time_spent);



            p[i].remaining_time -= time_spent;

            current_time += time_spent;



            if (p[i].remaining_time == 0) {

                p[i].completion_time = current_time;

                p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;

                p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;

                wait_time += p[i].waiting_time;

                tat += p[i].turnaround_time;

                completed++;

            }

        }

        i = (i + 1) % n;

    }



    printf("Finish\n");



    printf("\nProcess\tArrival\tBurst\tCompletion\tTAT\tWT\n");

    for (int i = 0; i < n; i++) {

        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time,

               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);

    }



    printf("\nAverage Turnaround Time: %.2f", (float)tat / n);

    printf("\nAverage Waiting Time: %.2f\n", (float)wait_time / n);

}



int main() {

    int n, time_quantum;



    printf("Enter the number of processes: ");

    scanf("%d", &n);



    struct Process p[n];



    for (int i = 0; i < n; i++) {

        p[i].pid = i + 1;

        printf("Enter arrival time for process P%d: ", i + 1);

        scanf("%d", &p[i].arrival_time);

        printf("Enter burst time for process P%d: ", i + 1);

        scanf("%d", &p[i].burst_time);

        p[i].remaining_time = p[i].burst_time; // Initialize remaining time

    }



    printf("Enter the time quantum: ");

    scanf("%d", &time_quantum);



    round_robin(p, n, time_quantum);



    return 0;

}
