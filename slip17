Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the Optimal page 
 replacement algorithm. Assume the memory of n frames.
Reference String : 7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6,


#include <stdio.h>



// Function to check if a page is already in a frame

int is_page_in_memory(int page, int frames[], int n) {

    for (int i = 0; i < n; i++) {

        if (frames[i] == page) {

            return 1; // Page found

        }

    }

    return 0; // Page not found

}



// Function to find the optimal page to replace

int find_optimal_page(int reference_string[], int frames[], int n, int index, int reference_length) {

    int farthest = index;

    int replace_index = -1;



    for (int i = 0; i < n; i++) {

        int j;

        for (j = index; j < reference_length; j++) {

            if (frames[i] == reference_string[j]) {

                if (j > farthest) {

                    farthest = j;

                    replace_index = i;

                }

                break;

            }

        }

        if (j == reference_length) {

            return i; // If the page is not referenced in the future, return it for replacement

        }

    }



    return (replace_index == -1) ? 0 : replace_index;

}



// Function to simulate Optimal Page Replacement

void optimal_page_replacement(int reference_string[], int reference_length, int frames[], int n) {

    int page_faults = 0;

    int index = 0; // To keep track of the current page being referenced



    printf("Page scheduling:\n");



    for (int i = 0; i < reference_length; i++) {

        int current_page = reference_string[i];



        // Check if the page is already in memory

        if (!is_page_in_memory(current_page, frames, n)) {

            page_faults++;



            if (index < n) {

                // If there is still space in memory, simply add the page

                frames[index++] = current_page;

            } else {

                // Find the optimal page to replace

                int replace_index = find_optimal_page(reference_string, frames, n, i + 1, reference_length);

                frames[replace_index] = current_page;

            }



            // Display the current state of frames

            for (int j = 0; j < n; j++) {

                if (frames[j] != -1) {

                    printf("%d ", frames[j]);

                } else {

                    printf("- ");

                }

            }

            printf("\n");

        } else {

            // Display the current state if there is no page fault

            for (int j = 0; j < n; j++) {

                if (frames[j] != -1) {

                    printf("%d ", frames[j]);

                } else {

                    printf("- ");

                }

            }

            printf(" (No page fault)\n");

        }

    }



    printf("\nTotal number of page faults: %d\n", page_faults);

}



int main() {

    int reference_string[] = {7, 5, 4, 8, 5, 7, 2, 3, 1, 3, 5, 9, 4, 6};

    int reference_length = sizeof(reference_string) / sizeof(reference_string[0]);



    int n;

    printf("Enter the number of frames: ");

    scanf("%d", &n);



    int frames[n];

    for (int i = 0; i < n; i++) {

        frames[i] = -1; // Initialize frames with -1 (empty)

    }



    optimal_page_replacement(reference_string, reference_length, frames, n);



    return 0;

}



Q.2 Write the program to simulate FCFS CPU-scheduling. The arrival time and 
 first CPU-burst of different jobs should be input to the system. Accept no. of 
 Processes, arrival time and burst time. The output should give Gantt chart, 
 turnaround time and waiting time for each process. Also find the average 
 waiting time and turnaround time.


 #include <stdio.h>



struct Process {

    int pid;

    int arrival_time;

    int burst_time;

    int completion_time;

    int turnaround_time;

    int waiting_time;

};



void sort_by_arrival(struct Process p[], int n) {

    struct Process temp;

    for (int i = 0; i < n - 1; i++) {

        for (int j = i + 1; j < n; j++) {

            if (p[i].arrival_time > p[j].arrival_time) {

                temp = p[i];

                p[i] = p[j];

                p[j] = temp;

            }

        }

    }

}



void fcfs_scheduling(struct Process p[], int n) {

    int current_time = 0;

    printf("\nGantt Chart:\n");

    for (int i = 0; i < n; i++) {

        if (current_time < p[i].arrival_time) {

            current_time = p[i].arrival_time;

        }

        printf("P%d [%d - %d] -> ", p[i].pid, current_time, current_time + p[i].burst_time);

        p[i].completion_time = current_time + p[i].burst_time;

        p[i].turnaround_time = p[i].completion_time - p[i].arrival_time;

        p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;

        current_time += p[i].burst_time;

    }

    printf("Finish\n");

}



void calculate_and_display_avg_times(struct Process p[], int n) {

    float total_turnaround_time = 0, total_waiting_time = 0;

    printf("\nProcess\tArrival\tBurst\tCompletion\tTAT\tWT\n");

    for (int i = 0; i < n; i++) {

        total_turnaround_time += p[i].turnaround_time;

        total_waiting_time += p[i].waiting_time;

        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\n", p[i].pid, p[i].arrival_time, p[i].burst_time,

               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);

    }

    printf("\nAverage Turnaround Time: %.2f", total_turnaround_time / n);

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);

}



int main() {

    int n;

    printf("Enter the number of processes: ");

    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {

        p[i].pid = i + 1;

        printf("Enter arrival time for process P%d: ", i + 1);

        scanf("%d", &p[i].arrival_time);

        printf("Enter burst time for process P%d: ", i + 1);

        scanf("%d", &p[i].burst_time);

    }

    sort_by_arrival(p, n);

    fcfs_scheduling(p, n);

    calculate_and_display_avg_times(p, n);

    return 0;

}
