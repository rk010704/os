Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the FIFO page 
 replacement algorithm. Assume the memory of n frames.
 Reference String : 2, 4, 5, 6, 9, 4, 7, 3, 4, 5, 6, 7, 2, 4, 7, 1 
 solution:-

#include <stdio.h>

#include <stdlib.h>



#define MAX 100



int main() {

    int frames[MAX], ref[MAX], n, ref_len;

    int page_faults = 0, front = 0, rear = 0;



    printf("Enter the number of frames: ");

    scanf("%d", &n);



    printf("Enter the number of pages in the reference string: ");

    scanf("%d", &ref_len);



    printf("Enter the reference string: ");

    for (int i = 0; i < ref_len; i++) {

        scanf("%d", &ref[i]);

    }



    for (int i = 0; i < n; i++) {

        frames[i] = -1;  // Initialize frames to -1 (empty)

    }



    for (int i = 0; i < ref_len; i++) {

        int page = ref[i];

        int found = 0;



        // Check if the page is already in the frames

        for (int j = 0; j < n; j++) {

            if (frames[j] == page) {

                found = 1;

                break;

            }

        }



        // Page fault occurred

        if (!found) {

            frames[rear] = page;  // Add the new page to the frames

            rear = (rear + 1) % n; // Move to the next frame

            if (front == rear) {

                front = (front + 1) % n; // Adjust front if frames are full

            }

            page_faults++;



            // Print current state of frames

            printf("Page %d loaded. Current frames: ", page);

            for (int j = 0; j < n; j++) {

                if (frames[j] != -1) {

                    printf("%d ", frames[j]);

                } else {

                    printf("- ");

                }

            }

            printf("\n");

        }

    }



    printf("Total page faults: %d\n", page_faults);



    return 0;

}

 
Q.2 Write a program to implement the shell. It should display the command 
 prompt “myshell$”. Tokenize the command line and execute the given 
 command by creating the child process. Additionally it should interpret the 
 following ‘list’ commands as 
 myshell$ list f dirname :- To print names of all the files in current 
 directory.
 myshell$ list i dirname :- To print names and inodes of the files in the 
 current directory.
 solution:-

 #include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <dirent.h>

#include <sys/stat.h>

#include <unistd.h>



#define MAX 1024



void list_files(const char *dirname, int show_inodes) {

    struct dirent *entry;

    struct stat file_stat;

    char filepath[MAX];



    DIR *dir = opendir(dirname);

    if (dir == NULL) {

        perror("Error opening directory");

        return;

    }



    while ((entry = readdir(dir)) != NULL) {

        if (entry->d_name[0] != '.') { // Skip hidden files

            snprintf(filepath, sizeof(filepath), "%s/%s", dirname, entry->d_name);

            if (show_inodes) {

                stat(filepath, &file_stat);

                printf("Inode: %lu - Name: %s\n", file_stat.st_ino, entry->d_name);

            } else {

                printf("%s\n", entry->d_name);

            }

        }

    }

    closedir(dir);

}



int main() {

    char input[MAX];

    char *args[MAX];



    while (1) {

        printf("myshell$ ");

        fgets(input, MAX, stdin);

        input[strcspn(input, "\n")] = 0;



        int i = 0;

        args[i] = strtok(input, " ");

        while (args[i] != NULL) {

            i++;

            args[i] = strtok(NULL, " ");

        }



        if (args[0] == NULL) {

            continue;

        }



        if (strcmp(args[0], "exit") == 0) {

            break;

        } else if (strcmp(args[0], "list") == 0 && args[1] != NULL && args[2] != NULL) {

            if (strcmp(args[1], "f") == 0) {

                list_files(args[2], 0); // List files

            } else if (strcmp(args[1], "i") == 0) {

                list_files(args[2], 1); // List files with inodes

            } else {

                printf("Invalid list option. Use 'f' for filenames or 'i' for inodes.\n");

            }

        } else {

            pid_t pid = fork();

            if (pid == 0) {

                execvp(args[0], args);

                perror("Error executing command");

                exit(1);

            } else {

                wait(NULL);

            }

        }

    }



    return 0;

}
