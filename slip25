Q1-Write a C program that accepts an integer array. Main function forks child 
 process. Parent process sorts an integer array and passes the sorted array to 
 child process through the command line arguments of execve() system call. 
 The child process uses execve() system call to load new program that uses this 
 sorted array for performing the binary search to search the particular item in 
 the array.



#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
void bubbleSort(int arr[], int n) 
{
for (int i = 0; i < n - 1; i++)
{
for (int j = 0; j < n - i - 1; j++)
{
if (arr[j] > arr[j + 1]) 
{
int temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}
}
}
void insertionSort(int arr[], int n) 
{
for (int i = 1; i < n; i++)
{
int key = arr[i];
int j = i - 1;
while (j >= 0 && arr[j] > key) 
{
arr[j + 1] = arr[j];
j = j - 1;
}
arr[j + 1] = key;
int main()
{
 int n;
 printf("Enter the number of integers: ");
 scanf("%d", &n);

int *arr (int *)malloc(n*sizeof(int)); 
if (arr== NULL) { 
perror("Failed to allocate memory";
 exit(1);
}
printf("Enter %d integers:\n", n); 
for (int i=0; i<n;i++) 
{
 scanf("%d", &arr[i]);
}
int pid=fork();

if (pid <0) 
{
perror("Fork failed");
free(arr); 
exit(1); 
}
else if (pid == 0)
{
 printf("Child Process: Sorting using Insertion Sort\n"); 
 insertionSort(arr, n);

printf("Child Process: Sorted array (Insertion Sort): ");
for (int i=0;i<n;i++]
{

printf("%d", arr[i]);
}
print("\n");
free(arr);
exit(0);
}
else
{
printf("Parent Process: Sorting using Bubble Sort\n");
bubblesort(arr,n);
printf("Parent Process: Sorting array (Bubble Sort):");
for(i=0;i<n;i++)
{
printf("%d", arr[i]);
}
printf("\n");
wait(NULL);
free(arr);
}
return 0;
}



Q.2 Write a programto implement the shell. It should display the command 
 prompt “myshell$”. Tokenize the command line and execute the given 
 command by creating the child process. Additionally it should interpret 
 the following commands. 
 myshell$ search f filename pattern :- To display first occurrence of 
 pattern in the file.































