Q.1 Write a C program to implement the shell which displays the command 
 prompt “myshell$”. It accepts the command, tokenize the command line and 
 execute it by creating the child process. Also implement the additional 
 command ‘typeline’ as 
 typeline -a filename :- To print all lines in the file. 

 #include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/wait.h>



#define MAX_CMD_LEN 1024

#define MAX_ARGS 100



// Function to implement the 'typeline -a filename' command

void typeline_all(char *filename) {

    FILE *file = fopen(filename, "r");

    char line[256];



    if (file == NULL) {

        perror("myshell");

        return;

    }



    // Print each line of the file

    while (fgets(line, sizeof(line), file)) {

        printf("%s", line);

    }

    fclose(file);

}



// Function to execute regular shell commands

void execute_command(char **args) {

    pid_t pid = fork();



    if (pid < 0) {

        perror("myshell");

    } else if (pid == 0) { // Child process

        if (execvp(args[0], args) == -1) {

            perror("myshell");

        }

        exit(EXIT_FAILURE);

    } else { // Parent process

        wait(NULL);

    }

}



int main() {

    char command[MAX_CMD_LEN];

    char *args[MAX_ARGS];

    char *token;

    int should_run = 1;



    while (should_run) {

        printf("myshell$ ");

        fgets(command, MAX_CMD_LEN, stdin);

        command[strlen(command) - 1] = '\0'; // Remove newline character



        int arg_count = 0;

        token = strtok(command, " ");

        while (token != NULL) {

            args[arg_count++] = token;

            token = strtok(NULL, " ");

        }

        args[arg_count] = NULL;



        if (arg_count == 0) {

            continue; // No input, prompt again

        }



        // Check for exit command

        if (strcmp(args[0], "exit") == 0) {

            should_run = 0;

        }

        // Implement 'typeline -a filename'

        else if (strcmp(args[0], "typeline") == 0 && arg_count == 3 && strcmp(args[1], "-a") == 0) {

            typeline_all(args[2]);

        }

        // Execute other commands

        else {

            execute_command(args);

        }

    }



    return 0;

}



Q.2 Write the program to simulate Non-preemptive Shortest Job First (SJF) –
 scheduling. The arrival time and first CPU-burst of different jobs should be 
 input to the system. Accept no. of Processes, arrival time and burst time. The 
 output should give Gantt chart, turnaround time and waiting time for each 
 process. Also find the average waiting time and turnaround time 



#include<stdio.h> 
#include<string.h> 
#include<stdlib.h> 
 
typedef struct PROCESS 
{ 
    char name[80] ; 
    int at , bt , ct , tat , tbt , wt ; 
}PROCESS ; 
 
PROCESS jobs[10] ; 
int processCount , totalTat=0 , totalWt = 0 ; 
float avgTat , avgWt ; 
 
void sort() 
{ 
    int i , j ; 
    PROCESS p ; 
    for(i = 0 ; i<processCount ; i++) 
    { 
        for(j=0 ; j<processCount ; j++) 
        { 
            if(jobs[i].at < jobs[j].at) 
            { 
                p = jobs[i] ;  
                jobs[i] = jobs[j] ; 
                jobs[j] = p ; 
            } 
        } 
    }  
} 
 
int getJob(int time) 
{ 
    int i , job , min = 999 ; 
    for(i=0 ; i<processCount ; i++) 
    { 
        if(jobs[i].at<=time && jobs[i].tbt!=0) 
        { 
            if(jobs[i].tbt < min) 
            { 
                min = jobs[i].tbt ; 
                job = i ; 
            } 
        } 
    } 
    return job ; 
} 
 
void getProcess() 
{ 
    int i ; 
    printf("\nEnter the number of processes: ") ; 
    scanf("%d",&processCount) ; 
 
    for(i=0 ; i<processCount ; i++) 
    { 
        printf("\nEnter the process name: ") ; 
        scanf("%s",jobs[i].name) ; 
        printf("Enter the CPU Burst time: ") ; 
        scanf("%d",&jobs[i].bt) ; 
        printf("Enter the Arrival time: ") ; 
        scanf("%d",&jobs[i].at) ; 
        jobs[i].tbt = jobs[i].bt ; 
    } 
    sort() ; 
} 
 
void process() 
{ 
    int job , count = 0 ,time = 0 ; 
    char currentJob[10] , prevJob[10] = "NULL" ; 
    printf("\n\n  GanttChart:\n") ;  
    printf("_________________________________________________\n") ; 
    while(1) 
    { 
        job = getJob(time) ; 
        jobs[job].tbt-- ; 
        strcpy(currentJob,jobs[job].name) ; 
        if(strcmp(currentJob,prevJob) !=0 ) 
        { 
            printf("%d|%d  %s  ",time , time , currentJob) ; 
        } 
        time++ ; 
        if(jobs[job].tbt==0) 
        { 
            jobs[job].ct = time ; 
            jobs[job].tat = time - jobs[job].at ; 
            jobs[job].wt = jobs[job].tat-jobs[job].bt ; 
            count++ ; 
            totalTat += jobs[job].tat ; 
            totalWt+=jobs[job].wt ; 
        } 
        strcpy(prevJob , currentJob) ; 
        if(count==processCount) 
            break ; 
    } 
    printf("%d|",time) ; 
    printf("\n_________________________________________________\n") ; 
    avgTat = (float)totalTat/processCount ; 
    avgWt = (float)totalWt/processCount ; 
} 
 
void display() 
{ 
    int i = 0 ; 
    printf("\n\n---------------------------------------------------------------------------------------------------\n") ; 
    printf("Process name\tArrival Time\tBurst Time\tCPU Time\tTurn Around 
time\tWait Time\n"); 
    printf("---------------------------------------------------------------------------------------------------\n"); 
    for(i=0 ; i<processCount ; i++) 
        printf("   %s   \t   %d       \t   %d     \t   %d        \t     %d    
       \t   %d \n",jobs[i].name ,  jobs[i].at , jobs[i].bt , jobs[i].ct , 
jobs[i].tat , jobs[i].wt ); 
    printf("---------------------------------------------------------------------------------------------------") ; 
    printf("\n\nTotal Turn Around Time: %d",totalTat) ; 
    printf("\nTotal Waiting Time: %d",totalWt) ; 
    printf("\n\nAverage Turn Around Time: %f",avgTat) ;  
    printf("\nAverage Waiting Time: %f\n",avgWt) ; 
} 
 
main() 
{ 
    system("clear"); 
    getProcess() ; 
    process() ; 
    display() ;  
} 
 
