Q.1 Write the simulation program for demand paging and show the page 
 scheduling and total number of page faults according the MRU page 
 replacement algorithm. Assume the memory of n frames.
Reference String : 8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2 
solution:-

#include <stdio.h>



#define MAX 100



int findMRU(int frames[], int ref[], int n, int currentIndex, int ref_len) {

    int mruIndex = 0, maxTime = -1;



    for (int i = 0; i < n; i++) {

        int j;

        for (j = currentIndex - 1; j >= 0; j--) {

            if (frames[i] == ref[j]) {

                if (j > maxTime) {

                    maxTime = j;

                    mruIndex = i;

                }

                break;

            }

        }

    }

    return mruIndex;

}



int main() {

    int frames[MAX], ref[MAX], page_faults = 0, n, ref_len;



    printf("Enter the number of frames: ");

    scanf("%d", &n);



    printf("Enter the number of pages in the reference string: ");

    scanf("%d", &ref_len);



    printf("Enter the reference string: ");

    for (int i = 0; i < ref_len; i++) {

        scanf("%d", &ref[i]);

    }



    for (int i = 0; i < n; i++) {

        frames[i] = -1;

    }



    for (int i = 0; i < ref_len; i++) {

        int page = ref[i], found = 0;



        for (int j = 0; j < n; j++) {

            if (frames[j] == page) {

                found = 1;

                break;

            }

        }



        if (!found) {

            if (i < n) {

                frames[i] = page;

            } else {

                int index = findMRU(frames, ref, n, i, ref_len);

                frames[index] = page;

            }

            page_faults++;



            printf("Page %d loaded. Current frames: ", page);

            for (int j = 0; j < n; j++) {

                if (frames[j] != -1) {

                    printf("%d ", frames[j]);

                } else {

                    printf("- ");

                }

            }

            printf("\n");

        }

    }



    printf("Total page faults: %d\n", page_faults);



    return 0;

}



Q.2 Write a programto implement the shell. It should display the command prompt 
 “myshell$”. Tokenize the command line and execute the given command by 
 creating the child process. Additionally it should interpret the following 
 commands. 
 myshell$ search f filename pattern :- To display first occurrence of 
 pattern in the file.
 myshell$ search a filename pattern :- To search all the occurrence of 
 pattern in the file.
 solution:-



 #include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <unistd.h>

#include <sys/wait.h>



#define MAX 1024



void search_first(const char *filename, const char *pattern) {

    FILE *file = fopen(filename, "r");

    if (file == NULL) {

        perror("Error opening file");

        return;

    }



    char line[MAX];

    int line_number = 1;



    while (fgets(line, sizeof(line), file) != NULL) {

        if (strstr(line, pattern) != NULL) {

            printf("First occurrence of '%s' found at line %d: %s", pattern, line_number, line);

            fclose(file);

            return;

        }

        line_number++;

    }



    printf("Pattern '%s' not found in the file.\n", pattern);

    fclose(file);

}



void search_all(const char *filename, const char *pattern) {

    FILE *file = fopen(filename, "r");

    if (file == NULL) {

        perror("Error opening file");

        return;

    }



    char line[MAX];

    int line_number = 1;

    int found = 0;



    while (fgets(line, sizeof(line), file) != NULL) {

        if (strstr(line, pattern) != NULL) {

            printf("Occurrence of '%s' found at line %d: %s", pattern, line_number, line);

            found = 1;

        }

        line_number++;

    }



    if (!found) {

        printf("Pattern '%s' not found in the file.\n", pattern);

    }



    fclose(file);

}



int main() {

    char input[MAX];

    char *args[MAX];



    while (1) {

        printf("myshell$ ");

        fgets(input, MAX, stdin);

        input[strcspn(input, "\n")] = 0;  // Remove newline character



        int i = 0;

        args[i] = strtok(input, " ");

        while (args[i] != NULL) {

            i++;

            args[i] = strtok(NULL, " ");

        }



        if (args[0] == NULL) {

            continue;  // Empty command

        }



        if (strcmp(args[0], "exit") == 0) {

            break;  // Exit the shell

        } else if (strcmp(args[0], "search") == 0 && args[1] != NULL && args[2] != NULL) {

            if (strcmp(args[1], "f") == 0) {

                search_first(args[2], args[3]);

            } else if (strcmp(args[1], "a") == 0) {

                search_all(args[2], args[3]);

            } else {

                printf("Invalid search option. Use 'f' for first occurrence or 'a' for all occurrences.\n");

            }

        } else {

            pid_t pid = fork();

            if (pid == 0) {

                execvp(args[0], args);

                perror("Error executing command");

                exit(1);

            } else {

                wait(NULL);

            }

        }

    }



    return 0;

}
